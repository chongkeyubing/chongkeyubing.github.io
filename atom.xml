<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李宝刚的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://libaogang.com/"/>
  <updated>2017-08-02T01:44:53.201Z</updated>
  <id>http://libaogang.com/</id>
  
  <author>
    <name>libaogang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pjax简要分析</title>
    <link href="http://libaogang.com/2017/07/30/pjax/"/>
    <id>http://libaogang.com/2017/07/30/pjax/</id>
    <published>2017-07-30T05:12:00.000Z</published>
    <updated>2017-08-02T01:44:53.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在寻找博客程序的过程中了解到了pjax技术，本文简要介绍了pjax技术。遗憾的是，由于本博客架构设计，不能以很小的代价切换到pjax技术。可以移步该<a href="https://tale.biezhi.me" target="_blank" rel="external">博客</a>体验下丝滑般的站内页面跳转。</p>
</blockquote>
<p>可以观察到github，facebook都支持这样的一种浏览方式， 当你点击一个站内的链接的时候， 不是做页面跳转， 而是只是站内页面刷新。 浏览器地址栏位上面的地址也会更改， 用浏览器的回退功能也能够回退到上一个页面。这样的用户体验， 比起整个页面都闪一下来说好很多。通过观察请求可以发现，他们都用到了pjax技术。</p>
<h2 id="history新接口"><a href="#history新接口" class="headerlink" title="history新接口"></a>history新接口</h2><p> pjax技术使用到了html5中history对象的新方法，简要介绍如下：</p>
<ul>
<li>pushState(state,title,url)方法</li>
</ul>
<p>向history对象中添加URL。pushState()有三个参数:state对象是一个JSON对象（对应URL，唯一性),它关系到由pushState()方法创建出来的新的history实体；title(现在是被忽略，未作处理)；URL(请求的链接)。利用该方法改变url而不会触发页面的刷新。</p>
<ul>
<li>replaceState(state,title,url)方法</li>
</ul>
<p>-history.replaceState() 替换当前的URL而不产生历史记录，参数和pushState一样。</p>
<ul>
<li>popstate事件</li>
</ul>
<p>当history实体被改变时，popstate事件将会发生。如果history实体是有pushState和replaceState方法产生的popstate事件的state属性会包含一份来自history实体的state对象的拷贝。</p>
<h2 id="传统ajax"><a href="#传统ajax" class="headerlink" title="传统ajax"></a>传统ajax</h2><p>虽然传统ajax可以异步获取服务端数据并无刷新改变页面内容，但是无法改变浏览器url。因此有种方案是在内容发生改变后通过改变URL的hash的方式获得更好的可访问性（因为只有改变url的hash才不会触发页面刷新），但是这种方案有时候不能很好的处理浏览器的前进和后退。pjax的出现就是为了解决这些问题。</p>
<h2 id="pjax"><a href="#pjax" class="headerlink" title="pjax"></a>pjax</h2><p>pjax就是pushState和ajax的结合，不需要重新加载整个页面就能从服务器加载Html到你当前页面，这个ajax请求会有永久链接、title并支持浏览器的回退/前进按钮。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>减轻服务端压力<br>按需请求，每次只需加载页面的部分内容，而不用重复加载一些公共的资源文件和不变的页面结构，大大减小了数据请求量，以减轻对服务器的带宽和性能压力，还大大提升了页面的加载速度。</li>
<li>优化页面跳转体验<br>常规页面跳转需要重新加载画面上的内容，会有明显的闪烁，而且往往和跳转前的页面没有连贯性，用户体验不是很好。如果再遇上页面比较庞大、网速又不是很好的情况，用户体验就更加雪上加霜了。使用pjax后，由于只刷新部分页面，切换效果更加流畅，而且可以定制过度动画，在等待页面加载的时候体验就比较舒服了。</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>使服务端处理变得复杂<br>要做到普通请求返回完整页面，而pjax请求只返回部分页面，服务端就需要做一些特殊处理，当然这对于设计良好的后端框架来说，添加一些统一处理还是比较容易的，自然也没太大问题。另外，即使后台不做处理，设置pjax的fragment参数来达到同样的效果。</li>
</ul>
<h3 id="简易原理"><a href="#简易原理" class="headerlink" title="简易原理"></a>简易原理</h3><p>观察github的请求,当点击Issues标签时，浏览器发送了一个ajax请求，拉取了部分html片段，同时浏览器url及标题也发生变化。<br><img src="/image/pjax.jpg" alt=""></p>
<p>以下代码实现了一个简易pjax以帮助理解pjax原理</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>pushState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拦截链接跳转</span>
                url <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    type<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
                    url<span class="token punctuation">:</span> <span class="token string">'data.php'</span><span class="token punctuation">,</span>
                    data<span class="token punctuation">:</span> <span class="token string">'pjax=1'</span><span class="token punctuation">,</span>
                    success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//改变URL和添加返回历史</span>
                        document<span class="token punctuation">.</span>title <span class="token operator">=</span> data<span class="token punctuation">.</span>title<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置标题</span>
                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更换页面main部分内容</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//低版本IE8等不支持HTML5 pushState,直接返回进行链接跳转</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p>pjax源码及具体的插件使用方式见<a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="external">jquery-pjax</a>项目</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在寻找博客程序的过程中了解到了pjax技术，本文简要介绍了pjax技术。遗憾的是，由于本博客架构设计，不能以很小的代价切换到pjax技术。可以移步该&lt;a href=&quot;https://tale.biezhi.me&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="技术" scheme="http://libaogang.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="pjax" scheme="http://libaogang.com/tags/pjax/"/>
    
      <category term="ajax" scheme="http://libaogang.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>记一次web安全漏洞分析与处理</title>
    <link href="http://libaogang.com/2017/07/29/web-security/"/>
    <id>http://libaogang.com/2017/07/29/web-security/</id>
    <published>2017-07-29T06:31:00.000Z</published>
    <updated>2017-08-02T01:44:53.156Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记一次用Appsan扫描站点扫描出的漏洞与解决方案</p>
</blockquote>
<h2 id="HTTP-PUT方法站点篡改"><a href="#HTTP-PUT方法站点篡改" class="headerlink" title="HTTP PUT方法站点篡改"></a>HTTP PUT方法站点篡改</h2><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>通过HTTP PUT 或者DELETE方法，可能会在 Web 服务器上上载、修改或删除 Web 页面、脚本和文件，这通常意味着完全破坏服务器及其内容。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>方案一</li>
</ul>
<p>修改DefaultServlet初始化参数readonly为true，对web服务器上的文件访问权限会变为只读，因此如PUT 和 DELETE的HTTP命令将被拒绝执行。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.apache.catalina.servlets.DefaultServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>debug<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>listings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>readonly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>
</code></pre>
<ul>
<li>方案二</li>
</ul>
<p>在web.xml中加入以下配置，禁止PUT DELETE HEAD OPTIONS TRACE方法</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-constraint</span><span class="token punctuation">></span></span>  
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-resource-collection</span><span class="token punctuation">></span></span>  
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>PUT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>  
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>DELETE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>  
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>HEAD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>  
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>OPTIONS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>  
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http-method</span><span class="token punctuation">></span></span>TRACE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http-method</span><span class="token punctuation">></span></span>  
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-resource-collection</span><span class="token punctuation">></span></span>  
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>auth-constraint</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>auth-constraint</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-constraint</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="跨站脚本攻击-Cross-Site-Scripting"><a href="#跨站脚本攻击-Cross-Site-Scripting" class="headerlink" title="跨站脚本攻击(Cross Site Scripting)"></a>跨站脚本攻击(Cross Site Scripting)</h2><p>xss是一门热门又不太受重视的Web攻击手法，因为这是一种被动的攻击方式，耗时长，有一定几率不成功，且没有相应的软件来完成自动化攻击。但是这并不影响黑客对此攻击手法的偏爱，因为几乎每个网站都存在xss漏洞。</p>
<h3 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h3><p>本地搭建一个java web环境，新建xss.jsp文件，代码如下</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE>
&lt;html></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>xss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>
your input is: &lt;%=request.getParameter("xss")%>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>页面是这样<br><img src="/image/web-security-1.png" alt=""><br>我们输入123，结果是这样的，没有任何问题<br><img src="/image/web-security-2.png" alt=""><br>看源代码，我们输入的字符串被原封不动地输出了</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE>
&lt;html></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>xss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>
your input is: 123  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>如果我们输入这段代码会怎么样？</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"css"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<p>因为页面会原封不动输出我们的输入，预期的页面的源代码应该是这样的</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE>
&lt;html></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>xss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>
your input is: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>alert("css")<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>我们的脚本会被执行，即弹窗，而事实也确实是这样的，成功弹窗。<br><img src="/image/web-security-3.png" alt=""></p>
<p>这时候已经可以确定存在xss漏洞了。其实到这里我也有点疑惑，弹个窗能有多大危害？其实弹窗只是测试，只要确定存在xss漏洞，那么就可以利用这个漏洞来插入并执行我们准备好的脚本，获取cookie从而获取用户权限，操纵用户行为。</p>
<p>当然，这只是基本原理。xss攻击方式多种多样，这里不作一一探索。</p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>新建XssHttpServletRequestWrapper类，继承自HttpServletRequestWrapper，并覆盖以下方法，将危险字符转义或去除。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>  
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequestWrapper<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XssHttpServletRequestWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">{</span>  

    <span class="token keyword">public</span> <span class="token function">XssHttpServletRequestWrapper</span><span class="token punctuation">(</span>HttpServletRequest servletRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span>String parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> null<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">int</span> count <span class="token operator">=</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      String<span class="token punctuation">[</span><span class="token punctuation">]</span> encodedValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          encodedValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cleanXSS</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
      <span class="token keyword">return</span> encodedValues<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          String value <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token keyword">return</span> null<span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token function">cleanXSS</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String value <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">cleanXSS</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> String <span class="token function">cleanXSS</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//You'll need to remove the spaces from the html entities below</span>
        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\("</span><span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\)"</span><span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"eval\\((.*)\\)"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']"</span><span class="token punctuation">,</span> <span class="token string">"\"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>新建XSSFilter类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XSSFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  

    <span class="token punctuation">}</span>  

    <span class="token annotation punctuation">@Override</span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span>  
            FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"enter xssfilter----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        XssHttpServletRequestWrapper xssRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XssHttpServletRequestWrapper</span><span class="token punctuation">(</span>  
                <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span> 

        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>xssRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token annotation punctuation">@Override</span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

    <span class="token punctuation">}</span>  

<span class="token punctuation">}</span>
</code></pre>
<p>web.xml配置如下，拦截所有请求。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>XSSFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>xxx.xxx.XSSFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>

 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>XSSFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="跨站请求伪造-Cross-Site-Request-Forgery"><a href="#跨站请求伪造-Cross-Site-Request-Forgery" class="headerlink" title="跨站请求伪造 (Cross Site Request Forgery)"></a>跨站请求伪造 (Cross Site Request Forgery)</h2><p>如果说xss的本质是攻击者获取了用户身份进行恶意操作，而csrf的本质是借用用户身份进行而已恶意操作。</p>
<h3 id="原理分析-2"><a href="#原理分析-2" class="headerlink" title="原理分析"></a>原理分析</h3><p>看下面一个例子：<br>A在银行有一笔存款，可以通过请求 <a href="http://www.bank.com/transfer?account=A&amp;amount=1000000&amp;for=B" target="_blank" rel="external">http://www.bank.com/transfer?account=A&amp;amount=1000000&amp;for=B</a> 把钱转到B的账户下。C在该银行也有账户，于是他伪造了一个地址 <a href="http://www.bank.com/transfer?account=A&amp;amount=1000000&amp;for=C" target="_blank" rel="external">http://www.bank.com/transfer?account=A&amp;amount=1000000&amp;for=C</a> 。如果直接访问，服务器会根据客户端cookie和服务端session识别出当前登录用户是C而不是A，不能接受请求。于是C新建一个广告页面，将此链接伪造在广告下，诱使A自己点这个链接。如果A在这个广告页点了这个链接，那么就会在他不知情的情况下将存款转给了C。</p>
<p>为什么会这样？因为受害者首先已经登录了银行网站取得了合法身份。在浏览器进程的生命周期内，即使浏览器同一个窗口打开了新的tab页面，cookie也都是有效的，在浏览器同一个窗口的多个tab页面里面是共享的。所以当A在广告页点击了C伪造的请求时，同时也携带了A在银行tab页的合法身份。而此时恰好服务端session还没有过期，于是服务器成功响应请求。</p>
<p>可以看到，以上例子是一个get请求，其实无论是get、post请求，链接、表单、ajax请求都无法避免跨站请求伪造的问题。</p>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>方案一 通过referer 判定来源页面</li>
</ul>
<pre class=" language-java"><code class="language-java">String referer<span class="token operator">=</span>httpRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>referer<span class="token operator">!=</span> null  <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>referer<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http://www.bank.com"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>从以上例子可以看出，A在点击伪造的请求时肯定是不在<a href="http://www.bank.com" target="_blank" rel="external">http://www.bank.com</a> 页面的，因此可以通过判断来源页面来拦截伪造的请求。但是referer是存在于http请求头部的， 可以拦截请求并任意修改referer值。虽然这个例子中受害者不可能自己去修改referer，但终究还是可能存在安全隐患。</p>
<ul>
<li>方案二 令牌同步</li>
</ul>
<p>Synchronizer token pattern</p>
<p>令牌同步模式（Synchronizer token pattern，简称STP）是在用户请求的页面中的所有表单中嵌入一个token，在服务端验证这个token的技术。token可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的token，因此可以判断出未授权的请求。</p>
<p>Cookie-to-Header Token</p>
<p>对于使用Js作为主要交互技术的网站，将CSRF的token写入到cookie中 </p>
<pre class=" language-javascript"><code class="language-javascript">Set<span class="token operator">-</span>Cookie<span class="token punctuation">:</span> CSRF<span class="token operator">-</span>token<span class="token operator">=</span>i8XNjC4b8KVok4uw5RftR38Wgp2BFwql<span class="token punctuation">;</span> expires<span class="token operator">=</span>Thu<span class="token punctuation">,</span> <span class="token number">23</span><span class="token operator">-</span>Jul<span class="token number">-2015</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">33</span> GMT<span class="token punctuation">;</span> Max<span class="token operator">-</span>Age<span class="token operator">=</span><span class="token number">31449600</span><span class="token punctuation">;</span> Path<span class="token operator">=</span><span class="token operator">/</span>
</code></pre>
<p>然后使用javascript读取token的值，在发送http请求的时候将其作为请求的header</p>
<pre class=" language-javascript"><code class="language-javascript">X<span class="token operator">-</span>CSRF<span class="token operator">-</span>Token<span class="token punctuation">:</span> i8XNjC4b8KVok4uw5RftR38Wgp2BFwql
</code></pre>
<p>最后服务器验证请求头中的token是否合法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记一次用Appsan扫描站点扫描出的漏洞与解决方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;HTTP-PUT方法站点篡改&quot;&gt;&lt;a href=&quot;#HTTP-PUT方法站点篡改&quot; class=&quot;headerlink&quot; title=&quot;HTTP
    
    </summary>
    
      <category term="技术" scheme="http://libaogang.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="http://libaogang.com/tags/web/"/>
    
      <category term="安全" scheme="http://libaogang.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>call by sharing</title>
    <link href="http://libaogang.com/2017/07/28/call-by-sharing/"/>
    <id>http://libaogang.com/2017/07/28/call-by-sharing/</id>
    <published>2017-07-28T11:50:00.000Z</published>
    <updated>2017-08-02T01:44:53.128Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在了解到call by sharing这种函数参数传递机制之前，误以为javascript函数参数传递机制采用的是call by value （值传递）和call by reference（引用传递）。本文将分析下call by sharing这种参数传递机制。</p>
</blockquote>
<h2 id="数据类型及内存分配"><a href="#数据类型及内存分配" class="headerlink" title="数据类型及内存分配"></a>数据类型及内存分配</h2><p>javascript中的数据类型：</p>
<ul>
<li>原始据类型primitive type ，比如Undefined,Null,Boolean,Number，String</li>
<li>引用类型 Object type ，比如Object,Array,Function,Date</li>
</ul>
<p>不同数据类型的内存分配：</p>
<ul>
<li>原始类型：存储在栈中的简单数据段。因为原始数据类型占据的内存空间是固定的，所以它们的值是直接存储在变量访问的位置即栈中，便于迅速查找变量的值。</li>
<li>引用类型：存储在堆中的对象。引用数据类型大小经常发生变化，如果把引用类型的值直接放在栈中会降低变量查找的速度。所以存放变量的栈空间的值是该对象存储在堆内存中的地址。因为内存地址的大小是固定的，所以把它存储在栈中对变量的查找性能无任何负面影响。</li>
</ul>
<h2 id="值传递（call-by-value）vs引用传递（call-by-reference）"><a href="#值传递（call-by-value）vs引用传递（call-by-reference）" class="headerlink" title="值传递（call by value）vs引用传递（call by reference）"></a>值传递（call by value）vs引用传递（call by reference）</h2><p>按值传递(call by value)是最常用的求值策略：函数的形参是被调用时所传实参的副本。修改形参的值并不会影响实参。</p>
<p>按引用传递(call by reference)时，函数的形参接收实参的隐式引用，而不再是副本。这意味着函数形参的值如果被修改，实参也会被修改。同时两者指向相同的值。</p>
<p>按值传递由于每次都需要克隆副本，对一些复杂类型，性能较低。两种传值方式都有各自的问题。按引用传递会使函数调用的追踪更加困难，有时也会引起一些微妙的BUG。</p>
<p>以下为c的一个例子解释值传递和引用传递</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">void</span> <span class="token function">Modify</span><span class="token punctuation">(</span>int p<span class="token punctuation">,</span> int <span class="token operator">*</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    p <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按值传递 - p是实参a的副本, 只有p被修改</span>
    <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// q是b的引用，q和b都被修改 </span>
<span class="token punctuation">}</span> 
int <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    int a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    int b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">Modify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a 按值传递, b 按引用传递, // a 未变化, b 改变了</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="探寻javascript函数参数传值方式"><a href="#探寻javascript函数参数传值方式" class="headerlink" title="探寻javascript函数参数传值方式"></a>探寻javascript函数参数传值方式</h2><p>以下代码可以看出js中基本类型是按值传递的</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 仍为1, 未受x = 2赋值所影响</span>
</code></pre>
<p>再看以下代码，obj的属性被修改了，说明obj和o指向同一个对象，那这是否就能说明js中的引用类型就是按引用传递的呢？</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    o<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
</code></pre>
<p>以下代码，如果是按引用传递，obj的值应该被修改为libaogang才对，但是事实并非如此，所以js中的引用类型并不是按引用传递。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    o <span class="token operator">=</span> <span class="token string">"libaogang"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 仍然是1, obj并未被修改为libaogang</span>
</code></pre>
<h2 id="共享传递（call-by-sharing）"><a href="#共享传递（call-by-sharing）" class="headerlink" title="共享传递（call by sharing）"></a>共享传递（call by sharing）</h2><p>准确的说，JS中的基本类型按值传递，对象类型按共享传递的(call by sharing，也叫按对象传递、按对象共享传递)。最早由Barbara Liskov. 在1974年的GLU语言中提出。值得注意的是，Python、Java、Ruby等多种语言都采用此种求值策略。</p>
<p>该求值策略表现为：形参为实参引用的副本，通过形参可以改变实参对象的属性，但是改变形参本身不会影响实参。<br>看以下代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token punctuation">:</span><span class="token string">'1'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token punctuation">:</span><span class="token string">'2'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">changeStuff</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'3'</span><span class="token punctuation">;</span>
    obj <span class="token operator">=</span> obj2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'3'</span>
</code></pre>
<p>当调用changeStuff（obj），形参obj为实参obj1的副本。即形参obj中存放的是obj1对象在堆中的内存地址，所以通过形参obj可以改变obj1对象的属性。而当改变形参obj的值时，并不会影响实参obj1的值。所以当执行obj=obj2时，obj1.value仍为3。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>综上，js的基本类型是按值传递，引用类型是按共享传递。<br>而按共享传递本质就是对象在堆内存中的地址的按值传递，所以也可以认为js中所有函数的参数都按值传递的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在了解到call by sharing这种函数参数传递机制之前，误以为javascript函数参数传递机制采用的是call by value （值传递）和call by reference（引用传递）。本文将分析下call by sharing这种
    
    </summary>
    
      <category term="技术" scheme="http://libaogang.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://libaogang.com/tags/javascript/"/>
    
      <category term="java" scheme="http://libaogang.com/tags/java/"/>
    
      <category term="函数" scheme="http://libaogang.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
